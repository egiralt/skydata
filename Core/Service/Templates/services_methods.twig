
{% macro buildLocalDataMethod (serviceName, table, method) %}
	$scope.{{ method.name }} = function ({% if method.parameters|length > 0 %}_{{ method.parameters|join(', _') }}{% endif %}) {
		return $http.get ('/postventa/service/{{ serviceName }}/{{ method.name }}'{% if method.parameters|length > 0 %} + '/' + encodeURIComponent(_{{ method.parameters|join(") + '/' + encodeURIComponent(_") }}),{% if method.parameters|length > 0 %} + "/" + {{ method.parameters|join('+ "/" + _')|raw }}{% endif %},
			{ {{ __.responseType(method.contentType) }} }
		{% endif %}). success ( function (data, status, headers, config) {
			{% if table.is_enumerable %} 	{# Si es una tabla enumerable se genera un ciclo para agregar cada uno de los registros #}
			for (var idx in data) {
				{% if table.fields|length > 1 %}  		{# ¿Hay muchos campos o solo 1? #}
				$scope.{{ table.name }}.push({
				{% for field in table.fields %}
					{{ field }}: data[idx].{{ field }}{% if field != table.fields|last %},{% endif %}
				{% endfor %} 	{# table.fields #}
				});
				{% else %}	{# solo un campo #}
					$scope.{{ table.name }}.push(data.{{ table.fields[0] }});
				{% endif %}
			}
			{% else %} {# No, no es enumerable .. es un valor simple #}
				{% if table.fields|length > 1 %} 		{# ¿Hay muchos campos o solo 1? #}
					$scope.{{ table.name }} = {
				{% for field in table.fields %}
					{{ field }}: data.{{ field }}{% if field != table.fields|last %},{% endif %}
				{% endfor %} {# table.fields #}
				};
				{% else %} 		{# solo un campo #}
					$scope.{{ table.name }}.{{ table.fields[0] }} = data.{{ table.fields[0] }};
				{% endif %}
			{% endif %} {# if table.is_enumerable #}
		});
	};
{% endmacro %}

{% macro buildBindableLocalMethod (serviceName, method) %}
	{% if method.bind_variable|length > 0 %}
		$scope.{{ method.bind_variable }} = null; {# Se inicializa la variable conectada al método #}
	{% endif %}
	$scope.{{ method.name }} = function ({% if method.parameters|length > 0 %}_{{ method.parameters|join(', _') }}{% endif %}) {

		{% if method.bind_variable|length > 0 %} {#  Si hay algo que retornar #}
		{% endif  %}
		{# Llamar al método #}
		return $http.get ('service/{{ serviceName }}/{{ method.name }}'{% if method.parameters|length > 0 %} + '/' + encodeURIComponent(_{{ method.parameters|join(') + "/" + encodeURIComponent(_')|raw }}),
		{ {{ __.responseType(method.contentType) }} }
		{% endif %}){% if method.bind_variable|length > 0 %}.success(function (data, status, headers, config	) { {# tiene una variable que asignar! #}

			{# Si es un contenido HTML hay que pasarlo por trustHTML para evitar errores de angular#}
			{% if method.contentType == 'html' %}
				$scope.{{ method.bind_variable }} = $sce.trustAsHtml(data);
			{% else %} {# Es cualquier otro contenido #}
				$scope.{{ method.bind_variable }} = data;
			{% endif %}

		});
		{% endif %};
	};

{% endmacro %}

{% import _self as this %}

{% macro renderAsTag (serviceName, method) %}

	{% import 'triggers.twig' as triggers %}
	{% import 'renderviews.twig' as views %}

	{% if method.render_tag or method.render_attribute or method.render_class  %}
		.directive('{{ method.tag.name }}', ['$rootScope', '$compile', '$sce', '$timeout', '$http', 'skydataPageServices',
			function ($rootScope, $compile, $sce, $timeout, $http, skydataPageServices) {
			return {
				restrict: '{{ method.type_of_render }}',
				replace: true,
				{% if method.tag.template_url|length > 0  %}templateUrl: '{{ method.tag.template_url }}',{% endif %}
				{% if method.tag.template|length > 0  %}template: '{{ method.tag.template|raw }}',{% endif %}
				scope: {},
				{% if method.tag.is_html %} {# Si es un objeto que genera HMTL el tratamiento es distinto #}

				link: function ($scope, $element, $attrs) {
						{# publicar los atributos en el modelo de datos para que funcionen los templates #}
						for( var attr in $attrs)
							if (!attr.match (/^\$/))
								$scope[attr] = $attrs[attr];
						{# función usada para refrescarel método #}
						{% if method.refresh > 0 %}
							var refresh_{{ method.name }} = function () {
								$scope.loading{{ method.name }} = false;
								$scope.loaded{{ method.name }} = false;
								do_{{ method.name }}();
							};
							$timeout (refresh_{{ method.name }}, {{ method.refresh }});
						{% endif %}

						{# función para ejecutar el metodo#}
						var do_{{ method.name }} = function ()
						{
							if (!$scope.loading{{ method.name }} && !$scope.loaded{{ method.name }} )
							{
								{% if method.showLoading %}
									$($element).append('<span class="loading-data-icon"><i class="fa fa-refresh fa-spin"></i></span>');
								{% endif %}
								$scope.loading{{ method.name }} = true;
								{# una lista de parámetros que hay que controlar si son undefined para que se pase un valor nulo o vacío #}
								{% if method.parameters|length > 0 %}
									{% for parameter in method.parameters %}
										var __{{ parameter }} = 'undefined' !== typeof $attrs.{{ parameter }} ? $attrs.{{ parameter }}
											.replace(/\//g,'.')
											.replace(/\?/g,'&#63;')
											.replace(/\&/g,'&amp;') : null;
									{% endfor %}
								{% endif %}
								{# Ahora se cuentan las instancias que se están ejecutando y se lanzan eventos para que los que quieran seguir la pista puedan #}
								{% if method.tag.trigger|length == 0 or method.tag.trigger == 'init' %}
									if (typeof $rootScope._downloads == "undefined"|| $rootScope._downloads == 0)
									{
										$rootScope._downloads = 0;
										$rootScope._max_downloads = 0;
										skydataPageServices.dispatchStartOfLoading ();
									}
									$rootScope._downloads += 1;
									$rootScope._max_downloads = $rootScope._downloads > $rootScope._max_downloads ? $rootScope._downloads : $rootScope._max_downloads;
									skydataPageServices.dispatchServiceStart ('{{ method.name }}', '{{ method.tag.name }}');
								{% endif %}
								$scope.{{ method.name }}({% if method.parameters|length > 0 %}__{{ method.parameters|join(', __') }}{% endif %})
								.then (function (response) {
									if (typeof response.data == "object" &&  response.data.error != null)
									{
										skydataPageServices.showError(response.data);
										{{ views.getErrorView(method) }}
									}
									else
									{
										try {
											var el = angular.element(response.data);
											var compiled = $compile(el);
											var domInserted = $($element).html (el);
											domInserted.find('.pop').popover()
											//domInserted.find ('.datatable').dataTable(dataTableConfig);

											compiled($scope);
										}
										catch(e)	{
											$($element).html(response.data);
										}
									}
									$scope.loading{{ method.name }} = false;
									$scope.loaded{{ method.name }} = true;
									{% if method.tag.trigger|length == 0 or method.tag.trigger == 'init' %}
										$rootScope._downloads -= 1;
										skydataPageServices.dispatchServiceComplete ('{{ method.name }}', '{{ method.tag.name }}');
										if ($rootScope._downloads == 0)
											skydataPageServices.dispatchEndOfLoading ();
									{% endif %}
								});
							}
							{% if method.refresh > 0 %}
								$timeout (refresh_{{ method.name }}, {{ method.refresh }});
							{% endif %}
						};
						{# Pre-Render View #}
						{{ views.getPreRenderView(method) }}
						{# Métodos de triggers #}
						{% if method.tag.trigger == 'hover' %} {# Al mover el mouse sobre el objeto #}
							{{ triggers.mouseenter(method)  }}
						{% elseif method.tag.trigger == 'click' %} {# Con un click#}
							{{ triggers.click(method) }}
						{% else %} {# Cuando se ha solicitado cuando se muestre el elemento #}
								do_{{ method.name }}();
						{% endif %}
						{# Refresh de los datos #}
						{% if method.refresh > 0 %}
							$(document).ready (function () {
								$timeout (do_{{ method.name }}, {{ method.refresh }});
							});
						{% endif %}
					},
				{% else %}
				link: function ($scope, $element, $attrs) {
					var do_{{ method.name }} = function () 	{
					 	$scope.{{ method.name }}({% if method.parameters|length > 0 %}$attrs.{{ method.parameters|join(', $attrs.') }}{% endif %});
					};
					{% if method.tag.trigger == 'hover' %}
						$element.on ('mouseenter', function (event) {
							do_{{ method.name }}();
						});
					{% else %}
						do_{{ method.name }}();
					{% endif %}
				},
				{% endif %}
				 controller: '{{ serviceName }}Controller'

			};
		}])
	{% endif %}
{% endmacro %}

