{#
	**header**
#}
'use strict';

var module_{{ serviceName }} = angular.module ('{{ serviceName }}',['SkyDataApp']);

{% import 'misc.twig' as __ %}
{% import 'services_methods.twig' as factory %}

  	module_{{ serviceName }}.controller ('{{ serviceName }}Controller', ['$scope', '$http', '$sce','$q', 'skydataPageServices', 
  	function ($scope, $http, $sce, $q, pageServices) 
 	{
			{% for table in tables %}
				{# Inicializar la variable del modelo. Si son varios parámetros se asigna en un array, si no, un objeto simple #}
				{# {% if table.fields|length > 1 %} #} 
					$scope.{{ table.name }} ={% if table.is_enumerable %} []{% else %} {}{% endif %};
				{#}
				{% else  %} 
					$scope.{{ table.name }} ={% if table.is_enumerable %} []{% else %} null{% endif %};
				{% endif %}
				#}
				
				{# Generar cada uno de los métodos asociados a la tabla de datos #}
				{% for method in table.methods %}
					{{ factory.buildLocalDataMethod (serviceName, table, method) }}
				{% endfor %} {# methods #}
				
			{% endfor %} {# tables #}
			
		{# Definir el resto de métodos que no están conectados a datos #}
		{% for method in methods %}
			{{ factory.buildBindableLocalMethod (serviceName, method) }}
		{% endfor %}
					
		{# Se deben generar los métodos que fueron marcados para ejecutarse al cargar el controller #}
		{% for table in tables %}
			{% for method in table.methods %}
				{% if method.run_on_load %}
					$scope.{{ method.name }}();
				{% endif %}
			{% endfor %}
		{% endfor %}
		
		{# Y además los métodos no asociados #}
		{% for method in methods %}
			{% if method.run_on_load %}
				$scope.{{ method.name }}();
			{% endif %}
		{% endfor %}
		
	}])
	{# Ahora los métodos con modelos de datos que generan tags #}
	{% for table in tables %}
		{% for method in table.methods %}
			{{ factory.renderAsTag (serviceName, method) }}
		{% endfor %}		
	{% endfor %}
	{# Y los métodos sin tablas también #}
	{% for method in methods %}
		{{ factory.renderAsTag (serviceName, method) }}
	{% endfor %};
{# 
		.directive ('vehiculoPopup', function ($compile, $rootScope) {
			return {
				restrict: 'E',
				replace: false,
				link: function (scope, $element, $attrs, controller) 
				{
					$attrs.$observe('bastidor', function(bastidor) {
						scope.GetVehiculoPopup(bastidor)
							.then (function (data) {
								$($element.get()).html(data);
								$($element.find ('.popover-js')).popover();
							});
					});
				}
			};
		});
#}